


 ██████╗██╗  ██╗ █████╗ ██████╗ ████████╗███████╗
██╔════╝██║  ██║██╔══██╗██╔══██╗╚══██╔══╝██╔════╝
██║     ███████║███████║██████╔╝   ██║   ███████╗
██║     ██╔══██║██╔══██║██╔══██╗   ██║   ╚════██║
╚██████╗██║  ██║██║  ██║██║  ██║   ██║   ███████║
 ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝
                                                 
List of D3/Angular Resources - https://www.dashingd3js.com/d3-resources/d3-and-angular
n3-charts - http://n3-charts.github.io/line-chart/#/home
Angular-nvd3-directives - http://cmaurer.github.io/angularjs-nvd3-directives/
Angular-Chartjs - http://jtblin.github.io/angular-chart.js/#reactive
Angular-nvD3 - http://krispo.github.io/angular-nvd3/#/
https://github.com/jeka-kiselyov/aws-cloudwatch-chart


==========================================================================================



███╗   ██╗ ██████╗ ██████╗ ███████╗
████╗  ██║██╔═══██╗██╔══██╗██╔════╝
██╔██╗ ██║██║   ██║██║  ██║█████╗  
██║╚██╗██║██║   ██║██║  ██║██╔══╝  
██║ ╚████║╚██████╔╝██████╔╝███████╗
╚═╝  ╚═══╝ ╚═════╝ ╚═════╝ ╚══════╝

                                   
AWS CLOUDWATCH CHARTS - https://github.com/jeka-kiselyov/aws-cloudwatch-chart

AWS Cloudwatch API Actions - http://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Operations.html
AWS Cloudwatch API DataTypes - http://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Types.html

http://www.seleniumtests.com/2015/12/real-time-jmeter-result-using-backend.html


**** Should we create a new user that connects to AWS? No *******

You're creating an app that runs on a mobile phone and that makes requests to AWS.
Don't create an IAM user and distribute the user's access key with the app. Instead, use an identity provider like Login with Amazon, Amazon Cognito, Facebook, or Google to authenticate users and map the users to an IAM role. The app can use the role to get temporary security credentials that have the permissions specified by the policies attached to the role. For more information, see the following:

CloudWatch Limits: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/cloudwatch_limits_cwl.html
CloudWatch Actions: http://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateLogGroup.html



TODO:
- [DONE] create user model for user logging in
  - [DONE] we only want pre-approved users to be able to login (No account creation available on the site)
  - [DONE] account needs to be created via command line-chart  

- [DONE] hand out JWT tokens that expire after 5 mins 

- Standard API Calls For the majority of Data calls
  - [DONE] /api/authenticate                         | POST | authenticates the user

  - [DONE] /api/log/groups                           | GET | returns all log group names
  - [DONE] /api/log/streams                          | GET | returns all log stream names

  - [DONE] /api/ec2                                  | GET | returns all EC2 instances
  - [DONE] /api/ec2/:instanceId/metrics              | GET | returns all metric (names, dimensions) for a particular EC2 instance
  - /api/ec2/:instanceId/metrics/stats                    | GET | returns stats for a particular EC2 metric

- Socket.io TCP Connection
  - authenticated connection with JWT

  Client:
  - connect to stream
    - we need to specify exactly what we want in the stream though. We want logdata 
  - 'get logdata'
    # 
          {
            logGroupName: 
            logStreamNames: ['']
          }

  - 'logdata received'
          {
            newRows
          }

  Server: 
  - 'get logdata'